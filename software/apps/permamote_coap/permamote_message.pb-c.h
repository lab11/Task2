/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: permamote_message.proto */

#ifndef PROTOBUF_C_permamote_5fmessage_2eproto__INCLUDED
#define PROTOBUF_C_permamote_5fmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Header Header;
typedef struct _SystemVoltages SystemVoltages;
typedef struct _ColorCounts ColorCounts;
typedef struct _ThreadInfo ThreadInfo;
typedef struct _SystemData SystemData;
typedef struct _SensorData SensorData;


/* --- enums --- */


/* --- messages --- */

struct  _Header
{
  ProtobufCMessage base;
  char *path;
  ProtobufCBinaryData id;
  uint32_t seq_no;
  uint64_t tv_sec;
  uint64_t tv_usec;
};
#define HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&header__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, 0, 0, 0 }


struct  _SystemVoltages
{
  ProtobufCMessage base;
  float vbat;
  float vsol;
  float vsec;
};
#define SYSTEM_VOLTAGES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&system_voltages__descriptor) \
    , 0, 0, 0 }


struct  _ColorCounts
{
  ProtobufCMessage base;
  uint32_t red;
  uint32_t green;
  uint32_t blue;
  uint32_t clear;
};
#define COLOR_COUNTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&color_counts__descriptor) \
    , 0, 0, 0, 0 }


struct  _ThreadInfo
{
  ProtobufCMessage base;
  uint32_t rloc16;
  ProtobufCBinaryData ext_addr;
};
#define THREAD_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&thread_info__descriptor) \
    , 0, {0,NULL} }


struct  _SystemData
{
  ProtobufCMessage base;
  Header *header;
  char *discovery;
  ThreadInfo *thread_info;
  char *version;
};
#define SYSTEM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&system_data__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string }


struct  _SensorData
{
  ProtobufCMessage base;
  Header *header;
  float temperature_c;
  float pressure_mbar;
  float humidity_percent;
  SystemVoltages *voltage;
  protobuf_c_boolean vbat_ok;
  float light_color_cct_k;
  ColorCounts *light_color_counts;
  float light_lux;
  protobuf_c_boolean motion;
};
#define SENSOR_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor_data__descriptor) \
    , NULL, 0, 0, 0, NULL, 0, 0, NULL, 0, 0 }


/* Header methods */
void   header__init
                     (Header         *message);
size_t header__get_packed_size
                     (const Header   *message);
size_t header__pack
                     (const Header   *message,
                      uint8_t             *out);
size_t header__pack_to_buffer
                     (const Header   *message,
                      ProtobufCBuffer     *buffer);
Header *
       header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   header__free_unpacked
                     (Header *message,
                      ProtobufCAllocator *allocator);
/* SystemVoltages methods */
void   system_voltages__init
                     (SystemVoltages         *message);
size_t system_voltages__get_packed_size
                     (const SystemVoltages   *message);
size_t system_voltages__pack
                     (const SystemVoltages   *message,
                      uint8_t             *out);
size_t system_voltages__pack_to_buffer
                     (const SystemVoltages   *message,
                      ProtobufCBuffer     *buffer);
SystemVoltages *
       system_voltages__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   system_voltages__free_unpacked
                     (SystemVoltages *message,
                      ProtobufCAllocator *allocator);
/* ColorCounts methods */
void   color_counts__init
                     (ColorCounts         *message);
size_t color_counts__get_packed_size
                     (const ColorCounts   *message);
size_t color_counts__pack
                     (const ColorCounts   *message,
                      uint8_t             *out);
size_t color_counts__pack_to_buffer
                     (const ColorCounts   *message,
                      ProtobufCBuffer     *buffer);
ColorCounts *
       color_counts__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   color_counts__free_unpacked
                     (ColorCounts *message,
                      ProtobufCAllocator *allocator);
/* ThreadInfo methods */
void   thread_info__init
                     (ThreadInfo         *message);
size_t thread_info__get_packed_size
                     (const ThreadInfo   *message);
size_t thread_info__pack
                     (const ThreadInfo   *message,
                      uint8_t             *out);
size_t thread_info__pack_to_buffer
                     (const ThreadInfo   *message,
                      ProtobufCBuffer     *buffer);
ThreadInfo *
       thread_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   thread_info__free_unpacked
                     (ThreadInfo *message,
                      ProtobufCAllocator *allocator);
/* SystemData methods */
void   system_data__init
                     (SystemData         *message);
size_t system_data__get_packed_size
                     (const SystemData   *message);
size_t system_data__pack
                     (const SystemData   *message,
                      uint8_t             *out);
size_t system_data__pack_to_buffer
                     (const SystemData   *message,
                      ProtobufCBuffer     *buffer);
SystemData *
       system_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   system_data__free_unpacked
                     (SystemData *message,
                      ProtobufCAllocator *allocator);
/* SensorData methods */
void   sensor_data__init
                     (SensorData         *message);
size_t sensor_data__get_packed_size
                     (const SensorData   *message);
size_t sensor_data__pack
                     (const SensorData   *message,
                      uint8_t             *out);
size_t sensor_data__pack_to_buffer
                     (const SensorData   *message,
                      ProtobufCBuffer     *buffer);
SensorData *
       sensor_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor_data__free_unpacked
                     (SensorData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Header_Closure)
                 (const Header *message,
                  void *closure_data);
typedef void (*SystemVoltages_Closure)
                 (const SystemVoltages *message,
                  void *closure_data);
typedef void (*ColorCounts_Closure)
                 (const ColorCounts *message,
                  void *closure_data);
typedef void (*ThreadInfo_Closure)
                 (const ThreadInfo *message,
                  void *closure_data);
typedef void (*SystemData_Closure)
                 (const SystemData *message,
                  void *closure_data);
typedef void (*SensorData_Closure)
                 (const SensorData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor header__descriptor;
extern const ProtobufCMessageDescriptor system_voltages__descriptor;
extern const ProtobufCMessageDescriptor color_counts__descriptor;
extern const ProtobufCMessageDescriptor thread_info__descriptor;
extern const ProtobufCMessageDescriptor system_data__descriptor;
extern const ProtobufCMessageDescriptor sensor_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_permamote_5fmessage_2eproto__INCLUDED */
